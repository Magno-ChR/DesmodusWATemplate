@page "/login"
@using Newtonsoft.Json;
@using System.Text;
@inject IResponse Http
@inject AuthenticationStateProvider Auth
@inject ILocalStorageService LocalStorage
@inject IToastService mensaje

@attribute [AllowAnonymous]
<PageTitle>Login</PageTitle>


        <div class="card">
            <div class="card-body">
                <EditForm Model="user" OnValidSubmit="HandleLogin" Context="datos">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="inputCorreo" class="form-label">Correo: </label>
                        <InputText @bind-Value="user.Correo" type="email" class="form-control" id="inputCorreo" aria-describedby="helpCorreo" />
                        @*<div id="helpCorreo" class="form-text">No compartas tu contraseña con nadie</div>*@
                    </div>
                    <div class="mb-3">
                        <label for="inputClave" class="form-label">Contraseña</label>
                        <InputText @bind-Value="user.Clave" type="password" class="form-control" id="inputClave" />
                    </div>
                    <button type="submit" class="btn btn-primary">Iniciar Sesión</button>     
                </EditForm>
                @*<button class="btn btn-primary" @onclick="async ()=>{await modal.AbrirModal();}">Abrir Modal</button>*@
            </div>
        </div>
       @*<Modal @ref="modal" titulo="Detalles" sizeModal="SizeModal.large"  id="loginModal" bloquearCerrar="true">
           Hola
       </Modal>*@


@code {
    UsuarioLoginDto user = new();
    private bool showModal = false;
    Modal? modal;
    [Inject] public NavigationManager navigationManager { get; set; }
    async Task HandleLogin()
    {
        try
        {

            var result = await Http.PostRequest<Respuesta<string>,UsuarioLoginDto>("https://localhost:7235/api/Auth/Login", user);
            if (!result.IsSuccess)
                mensaje.ShowWarning(result.Value.Message);
            else
            {
                await LocalStorage.SetItemAsync("token", result.Value.Value);
                await Auth.GetAuthenticationStateAsync();
                navigationManager.NavigateTo("/");
            }


        }
        catch(Exception ex)
        {
            mensaje.ShowError(ex.Message);
        }
    }

}
